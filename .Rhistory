return(x)
}
return(r)
}
tab_relecture_articles <- ANX4$i_8_evaluation_articles %>%
clean_names() %>%
select(revue_ouvrage, nombre_de_relectures) %>%
mutate(revue_ouvrage = str_to_lower(revue_ouvrage)) %>%
mutate(revue_ouvrage = str_trim(revue_ouvrage)) %>%
full_join(articles, by = c("revue_ouvrage" = "journal")) %>%
arrange(revue_ouvrage) %>%
unique() %>%
mutate(revue_ouvrage = clean_revues(revue_ouvrage)) %>%
group_by(revue_ouvrage) %>%
summarise(n_relecture = sum(nombre_de_relectures, na.rm = TRUE), n_publi = sum(n, na.rm = TRUE)) %>%
ungroup() %>%
unique()
clean_revues <- function(x) {
r <- case_when(
x == "water research, elsevier" ~ "water research",
x == "water resources research, agu" ~ "water resources research",
x == "water, mdpi journal" ~ "water",
x == "water science and technology: water supply, iwa" ~ "water science and technology: water supply",
x == "vertigo - la revue électronique en sciences de l'environnement 1" ~ "vertigo",
x == "revue internationale des etudes du développement" ~ "revue internationale des etudes du developpement",
x == "journal of hydroinformatics, iwa" ~ "journal of hydroinformatics",
x == TRUE ~ x
)
if (is.na(r)) {
return(x)
}
return(r)
}
clean_revues("water, mdpi journal")
clean_revues("water, mdpi ")
clean_revues <- function(x) {
r <- case_when(
x == "water research, elsevier" ~ "water research",
x == "water resources research, agu" ~ "water resources research",
x == "water, mdpi journal" ~ "water",
x == "water science and technology: water supply, iwa" ~ "water science and technology: water supply",
x == "vertigo - la revue électronique en sciences de l'environnement 1" ~ "vertigo",
x == "revue internationale des etudes du développement" ~ "revue internationale des etudes du developpement",
x == "journal of hydroinformatics, iwa" ~ "journal of hydroinformatics",
x == TRUE ~ x
)
if (is.na(r)) {
return(x)
}
return(r)
}
word_count <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(journal = clean_revues(journal)) %>%
group_by(journal) %>%
count() %>%
arrange(desc(n)) %>%
ungroup() %>%
rowwise() %>%
mutate(n = ifelse(journal == "Journal of Water Resources Planning and Management", yes = 7, no = n)) %>%
mutate(journal = ifelse(journal == "Journal of Water Resources Planning and Management", yes = "Water Res. Planning and Management", no = journal)) %>%
ungroup() %>%
mutate(journal = str_to_lower(journal)) %>%
mutate(journal = str_trim(journal))
ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(journal = clean_revues(journal))
is.na("water")
r = NA
x = jd
x = "jd"
if (is.na(r)) {
return(x)
}
if (is.na(r)) {
print(x)
}
r = "aa"
if (is.na(r)) {
print(x)
}
if (is.na(r)) {
print(x)
}
if (is.na(r)) {
print(x)
}
x
is.na(r)
print(r)
clean_revues <- function(x) {
r <- case_when(
x == "water research, elsevier" ~ "water research",
x == "water resources research, agu" ~ "water resources research",
x == "water, mdpi journal" ~ "water",
x == "water science and technology: water supply, iwa" ~ "water science and technology: water supply",
x == "vertigo - la revue électronique en sciences de l'environnement 1" ~ "vertigo",
x == "revue internationale des etudes du développement" ~ "revue internationale des etudes du developpement",
x == "journal of hydroinformatics, iwa" ~ "journal of hydroinformatics",
x == TRUE ~ x
)
if (is.na(r)) {
return(x)
}
return(r)
}
word_count <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(journal = clean_revues(journal)) %>%
group_by(journal) %>%
count() %>%
arrange(desc(n)) %>%
ungroup() %>%
rowwise() %>%
mutate(n = ifelse(journal == "Journal of Water Resources Planning and Management", yes = 7, no = n)) %>%
mutate(journal = ifelse(journal == "Journal of Water Resources Planning and Management", yes = "Water Res. Planning and Management", no = journal)) %>%
ungroup() %>%
mutate(journal = str_to_lower(journal)) %>%
mutate(journal = str_trim(journal))
word_count
word_count %>% pull(journal)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, out.width = "100%", dpi = 320)
# Chunk 2: packages
library(dplyr)
library(tidyr)
library(lubridate)
library(janitor)
library(ggplot2)
library(readxl)
library(purrr)
library(bib2df)
library(wordcloud2)
library(stringr)
library(readr)
source("R/theme_inrae.R")
# Chunk 3
# Fichier en date du 03/08/2020
file <- "data/Annexe4_ETBX_complet_2020_08_03.xlsx"
# On réalise une boucle pour importer tous les onglets dans un seul objet, sous forme de liste
sheet_names <- readxl::excel_sheets(file)
ANX4 <- list()
for (i in sheet_names[-1:-3]) {
ANX4[[i]] <- readxl::read_excel(file, sheet = i, skip = 1) %>%
select(-1) # Retrait colonne n°
}
# On rend exploitables les noms d'onglets
names(ANX4) <- janitor::make_clean_names(names(ANX4))
# Chunk 4
replace_cases <- function(x) {
value <- ifelse(is.na(x), yes = 0, no = 1)
return(value)
}
# Chunk 5
tab_dim <- tibble(
Onglet = names(ANX4),
nb_lignes = map_dbl(ANX4, nrow),
nb_colonnes = map_dbl(ANX4, ncol)
) %>%
arrange(desc(nb_lignes))
# On ne va garder que les onglets qui ne sont pas vides.
# Les onglets à 2 lignes sont à chaque fois vide (car la colonne n° a été remplie pour 1 et 2)
# sauf pour 4 onglets particuliers qui sont ici rajoutés.
Onglets_non_empty <- tab_dim %>%
filter(nb_lignes != 2) %>%
pull(Onglet) %>%
c("ii_3_activ_consult", "iii_1_elearning", "i_9_contrats_internationaux", "i_1_articles_synth")
# On affiche le tableau (Seulement le top 10)
tab_dim %>%
filter(Onglet %in% Onglets_non_empty) %>%
slice(1:10)
# Chunk 6
## Extraction des projets nationaux
projets_nationaux <- ANX4$i_9_contrats_nationaux %>%
clean_names() %>%
select(-x11) %>%
drop_na(contrat) %>%
drop_na(date_debut) %>%
mutate(type = "National")
## Projets européens
projets_europ <- ANX4$i_9_contrats_europ_autres %>%
drop_na(`Date début`) %>%
clean_names() %>%
mutate_at(vars(date_debut:date_fin), as.Date) %>%
mutate(type = "Européen")
## Projets internationaux
projets_inter <- ANX4$i_9_contrats_internationaux %>%
clean_names() %>%
mutate_at(vars(date_debut:date_fin), as.Date) %>%
mutate(type = "International")
## Projets R&D
projets_rd <- ANX4$i_9_contrats_prive_r_d_indus %>%
clean_names() %>%
mutate_at(vars(date_debut:date_fin), as.Date) %>%
mutate(type = "R&D")
## Projets PIA
projets_pia <- ANX4$i_9_contrats_pia %>%
clean_names() %>%
drop_na(contrat, date_debut) %>%
mutate_at(vars(date_debut:date_fin), as.Date) %>%
mutate(type = "PIA")
## Projets de collectivités territoriales
projets_coll_terri <- ANX4$i_9_contrats_coll_territ %>%
clean_names() %>%
drop_na(contrat, date_debut, date_fin) %>%
mutate_at(vars(date_debut), as.Date, origin = "1899-12-31") %>%
mutate(type = "National")
## On assemble le tout
PRJ <- bind_rows(projets_nationaux, projets_europ) %>%
bind_rows(projets_inter) %>%
bind_rows(projets_rd) %>%
bind_rows(projets_pia) %>%
bind_rows(projets_coll_terri) %>%
mutate_at(vars(porteur:axe_3), replace_cases) %>%
unique() %>%
mutate(date_fin = replace_na(date_fin, "2024-01-01")) %>%
mutate(porteur = recode(porteur, "0" = "Non porteur", "1" = "Porteur")) %>%
mutate(porteur = factor(porteur, levels = c("Porteur", "Non porteur"))) %>%
group_by(contrat) %>%
summarise(
date_debut = min(date_debut),
date_fin = max(date_fin),
porteur = unique(porteur),
type = unique(type)
) %>%
ungroup() %>%
arrange(desc(date_debut)) %>%
mutate(contrat = factor(contrat, levels = unique(contrat)))
# Chunk 7
ggplot(PRJ, aes(x = date_fin, y = contrat)) +
geom_segment(aes(x = date_debut, xend = date_fin, y = contrat, yend = contrat, color = type, linetype = porteur), size = 1.5) +
scale_y_discrete(limits = rev(levels(PRJ$contrat))) +
geom_point(fill = "black", color = "black", size = 3) +
geom_point(aes(x = date_debut, y = contrat), color = "black", fill = "black", size = 3) +
theme_inrae() +
theme(axis.text.y = element_text(size = 10)) +
labs(x = "Temps", y = "Contrats", color = "Type de contrat", linetype = "ETBX porteur ?")  +
theme(panel.grid.minor.x = element_blank())
# Chunk 8
PRJ %>% count(porteur)
PRJ %>% count(type)
# Chunk 9
PRJ %>%
mutate(
annee_debut = lubridate::year(date_debut),
annee_fin = lubridate::year(date_fin)
) %>%
group_by(annee_debut) %>%
count(type) %>%
spread(key = annee_debut, value = n) %>%
ungroup() %>%
mutate_at(vars(`2013`:`2019`), replace_na, 0)
# Chunk 10
PRJ %>%
mutate(
annee_debut = lubridate::year(date_debut),
annee_fin = lubridate::year(date_fin)
) %>%
group_by(annee_fin) %>%
count(type) %>%
spread(key = annee_fin, value = n) %>%
ungroup() %>%
mutate_at(vars(`2017`:`2025`), replace_na, 0)
# Chunk 11
par_an <- PRJ %>%
mutate(
annee_debut = lubridate::year(date_debut),
annee_fin = lubridate::year(date_fin)
)
l <- list()
for (i in 2014:2020) {
l[[as.character(i)]] <- par_an %>%
filter(annee_debut <= i & annee_fin >= i) %>%
mutate(an = i)
}
count_type <- function(df) {
df %>%
group_by(type, an) %>%
count() %>%
arrange(desc(n))
}
map(l, count_type) %>%
bind_rows() %>%
spread(key = an, value = n) %>%
ungroup() %>%
mutate_at(vars(`2014`:`2020`), replace_na, 0)
# Chunk 12
acl1 <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(year = stringr::str_extract(reference_complete, "\\d{4}")) %>%
drop_na(year) %>%
group_by(year) %>%
summarise(n = n_distinct(reference_complete)) %>%
spread(key = year, value = n) %>%
mutate(Type = "Articles")
acl2 <- ANX4$i_1_autres_articles %>%
clean_names() %>%
mutate(year = stringr::str_extract(reference_complete, "\\d{4}")) %>%
filter(year != 2016) %>%
drop_na(year) %>%
group_by(year) %>%
summarise(n = n_distinct(reference_complete)) %>%
spread(key = year, value = n) %>%
mutate(Type = "Autres articles")
acl3 <- ANX4$i_3_articles_actes_colloq %>%
clean_names() %>%
mutate(year = stringr::str_extract(reference_complete, "\\d{4}")) %>%
drop_na(year) %>%
group_by(year) %>%
summarise(n = n_distinct(reference_complete)) %>%
spread(key = year, value = n) %>%
mutate(Type = "Actes colloques")
acl4 <- ANX4$i_2_chap_ouvrages %>%
clean_names() %>%
mutate(year = stringr::str_extract(reference_complete, "\\d{4}")) %>%
drop_na(year) %>%
group_by(year) %>%
summarise(n = n_distinct(reference_complete)) %>%
spread(key = year, value = n) %>%
mutate(Type = "Chapitres ouvrages")
bind_rows(acl1, acl2, acl3, acl4) %>%
select(Type, `2017`:`2020`)
# Chunk 13
nb_art_ang <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
filter(articles_scientifiques_en_anglais_ou_dans_une_autre_langue_etrangere_shs_uniquement == "x") %>%
nrow()
# ANX4$i_1_autres_articles %>%
#   clean_names() %>%
#   filter(autres_articles_articles_publies_dans_des_revues_professionnelles_ou_techniques_etc_en_anglais_ou_dans_une_autre_langue_etrangere_shs_uniquement == "x") %>%
#   nrow()
nb_ouv_ang <- ANX4$i_2_chap_ouvrages %>%
clean_names() %>%
filter(chapitres_d_ouvrage_en_anglais_ou_dans_une_autre_langue_etrangere == "x") %>%
nrow()
# Chunk 14
clean_revues <- function(x) {
r <- case_when(
x == "water research, elsevier" ~ "water research",
x == "water resources research, agu" ~ "water resources research",
x == "water, mdpi journal" ~ "water",
x == "water science and technology: water supply, iwa" ~ "water science and technology: water supply",
x == "vertigo - la revue électronique en sciences de l'environnement 1" ~ "vertigo",
x == "revue internationale des etudes du développement" ~ "revue internationale des etudes du developpement",
x == "journal of hydroinformatics, iwa" ~ "journal of hydroinformatics",
x == TRUE ~ x
)
if (is.na(r)) {
return(x)
}
return(r)
}
word_count <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(journal = clean_revues(journal)) %>%
group_by(journal) %>%
count() %>%
arrange(desc(n)) %>%
ungroup() %>%
rowwise() %>%
mutate(n = ifelse(journal == "Journal of Water Resources Planning and Management", yes = 7, no = n)) %>%
mutate(journal = ifelse(journal == "Journal of Water Resources Planning and Management", yes = "Water Res. Planning and Management", no = journal)) %>%
ungroup() %>%
mutate(journal = str_to_lower(journal)) %>%
mutate(journal = str_trim(journal))
# wordcloud2(word_count, size = 0.35)
# Chunk 15
articles <- ANX4$i_1_articles_sctfq %>%
clean_names() %>%
mutate(journal = clean_revues(journal)) %>%
group_by(journal) %>%
count() %>%
arrange(desc(n)) %>%
mutate(journal = str_to_lower(journal)) %>%
mutate(journal = str_trim(journal))
tab_relecture_articles <- ANX4$i_8_evaluation_articles %>%
clean_names() %>%
select(revue_ouvrage, nombre_de_relectures) %>%
mutate(revue_ouvrage = str_to_lower(revue_ouvrage)) %>%
mutate(revue_ouvrage = str_trim(revue_ouvrage)) %>%
full_join(articles, by = c("revue_ouvrage" = "journal")) %>%
arrange(revue_ouvrage) %>%
unique() %>%
mutate(revue_ouvrage = clean_revues(revue_ouvrage)) %>%
group_by(revue_ouvrage) %>%
summarise(n_relecture = sum(nombre_de_relectures, na.rm = TRUE), n_publi = sum(n, na.rm = TRUE)) %>%
ungroup() %>%
unique()
# Chunk 16
tab_relecture_articles %>%
mutate(diff = abs(n_publi - n_relecture)) %>%
filter(diff > 1) %>%
ggplot(aes(x = reorder(revue_ouvrage, -n_publi))) +
geom_segment(aes(
x = reorder(revue_ouvrage, -n_publi), xend = reorder(revue_ouvrage, -n_publi),
y = n_publi, yend = n_relecture
)) +
geom_point(aes(y = n_publi, fill = "Nombre de publications"), color = "black", shape = 21, size = 4, alpha = 0.8) +
geom_point(aes(y = n_relecture, fill = "Nombre de relectures"), color = "black", shape = 21, size = 4, alpha = 0.8) +
theme_inrae() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x = "Revues", y = "Nombre", fill = "Type") +
scale_y_continuous(breaks = seq(0, 30, 2)) +
labs(caption = "NB : par souci de lisibilité, seules les revues pour lesquelles la différence entre les deux variables est supérieure à 1 sont affichées")
library(IDEATools)
library(tidyverse)
liste_indicateurs <- label_nodes %>% filter(level == "indicateur") %>% pull(code_indicateur)
replace_indicateur <- function(indicateur) {
res <- dplyr::case_when(
indicateur %in% liste_indicateurs ~ indicateur,
indicateur == "Diversité de l'organisation spatiale et temporelle" ~ "R1",
indicateur == "Limiter l'exposition aux aléas" ~ "R2",
indicateur == "Diversité des activités" ~ "R3",
indicateur == "En favorisant la diversité" ~ "R4",
indicateur == "De l'outil de production" ~ "R5",
indicateur == "En développant l'inertie et les capacités tampon" ~ "R6",
indicateur == "Réduire la sensibilité" ~ "R7",
indicateur == "par l'insertion dans les réseaux" ~ "R8",
indicateur == "Augmenter la capacité d'adaptation" ~ "R9",
indicateur == "Robustesse" ~ "R10",
indicateur == "Naturelles" ~ "CP1",
indicateur == "Travail" ~ "CP2",
indicateur == "Compétences et équipements" ~ "CP3",
indicateur == "Sociales et humaines" ~ "CP4",
indicateur == "Préserver ou créer des ressources pour l'acte de production" ~ "CP5",
indicateur == "Développer la capacité alimentaire" ~ "CP6",
indicateur == "Capacité à produire dans le temps des biens et services remunérés" ~ "CP7",
indicateur == "Capacité de remboursement" ~ "CP8",
indicateur == "Capacité à dégager un revenu dans le temps" ~ "CP9",
indicateur == "Capacité productive et reproductive de biens et de services" ~ "CP10",
indicateur == "Liberté de décision organisationnelle" ~ "AU1",
indicateur == "Liberté de décision dans les relations commerciales" ~ "AU2",
indicateur == "Disposer d'une liberté de décision dans ses choix de gouvernance et de production" ~ "AU3",
indicateur == "Disposer d'une autonomie financière" ~ "AU4",
indicateur == "Autonomie dans le processus productif" ~ "AU5",
indicateur == "Autonomie" ~ "AU6",
indicateur == "Partage et transparence des activités productives" ~ "RG1",
indicateur == "Ouverture et relation au monde non agricole" ~ "RG2",
indicateur == "Sécurité alimentaire" ~ "RG3",
indicateur == "Implications et engagements sociaux" ~ "RG4",
indicateur == "Ressources naturelles" ~ "RG5",
indicateur == "Ressources énergétiques et manufacturées" ~ "RG6",
indicateur == "Partager équitablement les ressources" ~ "RG7",
indicateur == "Conditions de travail de la main d'oeuvre " ~ "RG8",
indicateur == "Conditions de travail de la main d'oeuvre" ~ "RG8",
indicateur == "Conditions de vie et de travail" ~ "RG9",
indicateur == "Bien être de la vie animale" ~ "RG10",
indicateur == "Contribuer à la qualité de vie sur l'exploitation" ~ "RG11",
indicateur == "Réduire les émissions" ~ "RG12",
indicateur == "Réduire l'usage des produits polluants" ~ "RG13",
indicateur == "Réduire ses impacts sur la santé et les écosystèmes" ~ "RG14",
indicateur == "Responsabilité globale" ~ "RG15",
indicateur == "Valoriser la qualité territoriale" ~ "AN1",
indicateur == "Contribuer à des démarches d'économie circulaire" ~ "AN2",
indicateur == "Par le travail et l'emploi" ~ "AN3",
indicateur == "S'inscrire dans des démarches de territoire" ~ "AN4",
indicateur == "Ancrage territorial" ~ "AN5"
)
return(res)
}
MTD_legende <- tibble::tribble(
~code_MTD,                                   ~nom_MTD,                                                      ~etendue,
"MTD_00",      "Version du calculateur utilisée",                                                    "Alpha 10",
"MTD_01",             "Identifiant exploitation",                                                       "Num 6",
"MTD_02",                                  "SAU",                                           "0 à 10 000 (2 dc)",
"MTD_03",                                  "UTH",                                           "0 à 10 000 (2 dc)",
"MTD_04",                                "UTH F",                                              "0 à 100 (2 dc)",
"MTD_05", "Tranche d’âge du chef d’exploitation", "«-25»,«25-35»,«35-45», «45-55»,«55-65» et «65+»",
"MTD_06",      "Typologie d'exploitation (OTEX)",                                       "Codes OTEX simplifiés",
"MTD_07",      "Surface en herbe en % de la SAU",                                              "0 à 100 (2 dc)",
"MTD_08",               "Capital d’exploitation",                                             "0 à 100000 000",
"MTD_09",                                  "EBE",                                    "– 1000 000 à 10000 000",
"MTD_10",                     "Résultat courant",                                    "– 1000 000 à 10000 000",
"MTD_11",      "Zone géographique (département)",                                      "liste des départements",
"MTD_12",         "Atelier hors sol: oui / non",                                                      "0 ou 1",
"MTD_13",                      "Année d'enquête",                                                       "Num 4",
"MTD_14",                       "Type d’élevage",       "0 - pas d’élevage / 1 – monogastrique / 2 - herbivore",
"MTD_15",              "Part des PP dans la SAU",                                              "0 à 100 (2 dc)",
"MTD_16", "Usage des produits phytos: oui /non",                                                      "0 ou 1"
) %>%
mutate(nom_complet = paste(code_MTD, nom_MTD,sep = " - ")) %>% select(-etendue)
## Table indicateur
indicateur <- label_nodes %>%
select(code_indicateur, nom_indicateur, nom_complet, niveau = level, dimension,code_dimension=dim, composante) %>%
bind_rows(MTD_legende)
# Creation DB -------------------------------------------------------------
evenement = tibble()
exploitation = tibble()
notes_idea = tibble()
database <- list(evenement = evenement, exploitation = exploitation, notes_idea = notes_idea, indicateur = indicateur)
# Alimentation de la table ------------------------------------------------
fname <- file.path("../../Traitements IDEA/Base_calculateurs/",list.files("../../Traitements IDEA/Base_calculateurs/"))
for(i in fname){
IDEAdata <- importIDEA(i)
increment = nrow(database$evenement)+1
## Table "evenement"
add_evenement <- tibble(code_analyse = increment,jma_hms_import = format(Sys.time(), "%d-%m-%Y_%H-%M-%S"))
## Table "metadata"
add_exploitation <- IDEAdata$metadata %>% mutate(code_analyse = increment) %>% gather(key = code_MTD, value = value, - code_analyse)
## Table "notes_idea"
valeur_indicateur <- IDEAdata$dataset %>% select(code_indicateur = indicateur, score_deplaf = unscaled_value, score = value) %>% mutate(code_analyse = increment)
proprietes <- IDEAdata$nodes$Global %>% gather(key = code_indicateur, value = evaluation, -id_exploit) %>%
mutate(code_analyse = increment) %>%
select(-id_exploit) %>%
mutate(code_indicateur = replace_indicateur(code_indicateur))
add_notes_idea <- full_join(valeur_indicateur,proprietes, by = c("code_analyse","code_indicateur"))
# INSERTION ---------------------------------------------------------------
database$evenement = bind_rows(database$evenement,add_evenement)
database$exploitation = bind_rows(database$exploitation,add_exploitation) %>% select(code_analyse,code_MTD,value)
database$notes_idea = bind_rows(database$notes_idea,add_notes_idea) %>% select(code_analyse,code_indicateur,score,score_deplaf,evaluation)
}
database %>% purrr::map(head)
